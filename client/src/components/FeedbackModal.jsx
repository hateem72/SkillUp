import { useState, useRef } from 'react';
import { FaChartBar, FaThumbsUp, FaLightbulb, FaRegClock, FaAward, FaDownload, FaTimes } from 'react-icons/fa';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const FeedbackDisplay = ({ feedback, onClose, type = 'debate', topic, trainerName }) => {
  const [activeTab, setActiveTab] = useState('analysis');
  const chartRef = useRef(null);

  const getReportTitle = () => {
    switch(type) {
      case 'interview':
        return 'Interview Performance Report';
      case 'speech':
        return 'Speech Practice Report';
      case 'debate':
      default:
        return 'Debate Performance Report';
    }
  };

  let parsedFeedback = {
    stats: {},
    summary: '',
    quote: '',
    highlights: [],
    improvements: [],
    tips: [],
    next_steps: []
  };

  if (feedback) {
    if (typeof feedback === 'string') {
      try {
        parsedFeedback = JSON.parse(feedback);
      } catch (error) {
        console.error('Failed to parse feedback JSON:', error);
        parsedFeedback = {
          stats: {},
          summary: feedback || 'Failed to generate feedback',
          quote: '',
          highlights: [],
          improvements: [],
          tips: [],
          next_steps: []
        };
      }
    } else {
      parsedFeedback = feedback;
    }
  }

  const chartData = {
    labels: Object.keys(parsedFeedback?.stats || {}),
    datasets: [{
      label: 'Performance Score',
      data: Object.values(parsedFeedback?.stats || {}).map(stat => stat?.score || 0),
      backgroundColor: [
        'rgba(99, 102, 241, 0.7)',
        'rgba(16, 185, 129, 0.7)',
        'rgba(245, 158, 11, 0.7)',
        'rgba(139, 92, 246, 0.7)'
      ],
      borderColor: [
        'rgba(99, 102, 241, 1)',
        'rgba(16, 185, 129, 1)',
        'rgba(245, 158, 11, 1)',
        'rgba(139, 92, 246, 1)'
      ],
      borderWidth: 1
    }]
  };

  const generatePDF = () => {
    try {
      const doc = new jsPDF('p', 'pt', 'a4');
      const margin = 40;
      const pageWidth = doc.internal.pageSize.getWidth() - 2 * margin;
      const reportTitle = getReportTitle();
      
      const addHeader = (doc, title) => {
        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(40);
        doc.text(`SKILLUP - ${reportTitle}`, margin, 30);
        
        if (topic) {
          doc.setFontSize(12);
          doc.setFont('helvetica', 'italic');
          doc.text(`Topic: ${topic}`, margin, 50);
        }
        
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text(title, margin, 70);
        
        doc.setDrawColor(200);
        doc.setLineWidth(0.5);
        doc.line(margin, 80, doc.internal.pageSize.getWidth() - margin, 80);
      };
      
      const addFooter = (doc, pageNumber) => {
        doc.setFontSize(10);
        doc.setTextColor(150);
        doc.text(`Generated on ${new Date().toLocaleDateString()}`, margin, doc.internal.pageSize.getHeight() - 20);
        doc.text(`Page ${pageNumber}`, doc.internal.pageSize.getWidth() - margin, doc.internal.pageSize.getHeight() - 20, { align: 'right' });
      };
      
      doc.setFontSize(24);
      doc.setFont('helvetica', 'bold');
      doc.text(reportTitle, doc.internal.pageSize.getWidth() / 2, 250, { align: 'center' });
      
      doc.setFontSize(16);
      doc.setFont('helvetica', 'normal');
      doc.text(`Generated by SKILLUP AI`, doc.internal.pageSize.getWidth() / 2, 280, { align: 'center' });
      
      if (trainerName) {
        doc.setFontSize(14);
        doc.text(`Coach: ${trainerName}`, doc.internal.pageSize.getWidth() / 2, 300, { align: 'center' });
      }
      
      doc.setFontSize(12);
      doc.text(parsedFeedback.quote || "Practice makes perfect!", doc.internal.pageSize.getWidth() / 2, 330, { align: 'center', maxWidth: pageWidth });
      
      addFooter(doc, 1);
      
      doc.addPage();
      addHeader(doc, 'Overall Performance');
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(parsedFeedback.summary, margin, 100, { maxWidth: pageWidth });
      
      if (parsedFeedback.quote) {
        doc.setFont('helvetica', 'italic');
        doc.text(`"${parsedFeedback.quote}"`, margin, doc.internal.pageSize.getHeight() - 60, { maxWidth: pageWidth });
      }
      
      addFooter(doc, 2);
      
      doc.addPage();
      addHeader(doc, 'Performance Analysis');
      
      const chartDataForTable = Object.entries(parsedFeedback.stats).map(([key, value]) => [
        key.replace('_', ' '),
        value.score,
        value.comment
      ]);
      
      autoTable(doc, {
        startY: 90,
        head: [['Category', 'Score (out of 5)', 'Comments']],
        body: chartDataForTable,
        margin: { left: margin, right: margin },
        styles: {
          halign: 'left',
          cellPadding: 5,
          fontSize: 10
        },
        headStyles: {
          fillColor: [41, 128, 185],
          textColor: 255,
          fontStyle: 'bold'
        },
        alternateRowStyles: {
          fillColor: [240, 240, 240]
        },
        columnStyles: {
          0: { cellWidth: 'auto' },
          1: { cellWidth: 60 },
          2: { cellWidth: 'auto' }
        }
      });
      
      doc.setFontSize(12);
      doc.text('Performance Scores:', margin, doc.lastAutoTable.finalY + 20);
      
      Object.entries(parsedFeedback.stats).forEach(([key, value], index) => {
        const yPos = doc.lastAutoTable.finalY + 40 + (index * 20);
        doc.text(`${key.replace('_', ' ')}:`, margin, yPos);
        
        const barWidth = (value.score / 5) * 200;
        doc.setFillColor(41, 128, 185);
        doc.rect(margin + 100, yPos - 5, barWidth, 10, 'F');
        
        doc.text(`${value.score}/5`, margin + 100 + barWidth + 10, yPos);
      });
      
      addFooter(doc, 3);
      
      doc.addPage();
      addHeader(doc, 'Your Strengths');
      doc.setFontSize(12);
      
      parsedFeedback.highlights.forEach((highlight, index) => {
        const yPos = 100 + (index * 30);
        doc.setFillColor(230, 245, 230);
        doc.rect(margin, yPos - 10, 15, 15, 'F');
        doc.text(`${index + 1}.`, margin + 5, yPos, { align: 'center' });
        doc.text(highlight, margin + 25, yPos);
      });
      
      addFooter(doc, 4);
      
      doc.addPage();
      addHeader(doc, 'Areas for Improvement');
      doc.setFontSize(12);
      
      parsedFeedback.improvements.forEach((improvement, index) => {
        const yPos = 100 + (index * 30);
        doc.setFillColor(255, 243, 205);
        doc.rect(margin, yPos - 10, 15, 15, 'F');
        doc.text(`${index + 1}.`, margin + 5, yPos, { align: 'center' });
        doc.text(improvement, margin + 25, yPos);
      });
      
      addFooter(doc, 5);
      
      doc.addPage();
      addHeader(doc, 'Actionable Tips');
      doc.setFontSize(12);
      
      const tipsPerColumn = Math.ceil(parsedFeedback.tips.length / 3);
      const columnWidth = pageWidth / 3 - 10;
      
      parsedFeedback.tips.forEach((tip, index) => {
        const col = Math.floor(index / tipsPerColumn);
        const row = index % tipsPerColumn;
        const xPos = margin + (col * (columnWidth + 10));
        const yPos = 100 + (row * 50);
        
        doc.setFillColor(230, 230, 255);
        doc.roundedRect(xPos, yPos - 15, columnWidth, 40, 5, 5, 'F');
        doc.setTextColor(0);
        doc.setFont('helvetica', 'bold');
        doc.text(`TIP ${index + 1}`, xPos + 10, yPos);
        doc.setFont('helvetica', 'normal');
        doc.text(tip, xPos + 10, yPos + 15, { maxWidth: columnWidth - 20 });
      });
      
      doc.setFontSize(14);
      doc.text('Recommended Next Steps:', margin, doc.lastAutoTable?.finalY || 320);
      
      parsedFeedback.next_steps.forEach((step, index) => {
        const yPos = (doc.lastAutoTable?.finalY || 340) + 20 + (index * 20);
        doc.setFillColor(220, 220, 255);
        doc.circle(margin + 10, yPos - 5, 3, 'F');
        doc.text(step, margin + 20, yPos);
      });
      
      addFooter(doc, 6);
      
      const fileName = `SKILLUP_${reportTitle.replace(/ /g, '_')}_${new Date().toISOString().slice(0, 10)}.pdf`;
      doc.save(fileName);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    }
  };

  const reportTitle = getReportTitle();

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 p-4">
      <div className="bg-gray-900 text-gray-100 rounded-xl border border-gray-700 overflow-hidden shadow-2xl w-full max-w-4xl max-h-[90vh] flex flex-col">
        <div className="bg-gradient-to-r from-gray-800 to-gray-900 p-6 border-b border-gray-700 relative">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              <FaAward className="text-2xl text-yellow-400" />
              <div>
                <h2 className="text-2xl font-bold">{reportTitle}</h2>
                <p className="text-gray-400">Generated by SKILLUP AI</p>
                {topic && <p className="text-sm text-gray-500 mt-1">Topic: {topic}</p>}
              </div>
            </div>
            <div className="flex gap-2">
              <button 
                onClick={generatePDF}
                className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
              >
                <FaDownload /> Export PDF
              </button>
              <button 
                onClick={onClose}
                className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
              >
                <FaTimes /> Close
              </button>
            </div>
          </div>
        </div>


        <div className="overflow-y-auto flex-1">
          <div className="p-6 border-b border-gray-700">
            <h3 className="text-lg font-semibold mb-2 text-blue-400">Overall Performance</h3>
            <p className="text-gray-300 mb-4">{parsedFeedback.summary}</p>
            <div className="flex items-center gap-2 text-purple-400">
              <span className="font-medium">Key Insight:</span>
              <span>"{parsedFeedback.quote}"</span>
            </div>
          </div>

          <div className="flex border-b border-gray-700 sticky top-0 bg-gray-900 z-10">
            <button
              className={`px-6 py-3 font-medium flex items-center gap-2 ${activeTab === 'analysis' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400'}`}
              onClick={() => setActiveTab('analysis')}
            >
              <FaChartBar /> Analysis
            </button>
            <button
              className={`px-6 py-3 font-medium flex items-center gap-2 ${activeTab === 'highlights' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400'}`}
              onClick={() => setActiveTab('highlights')}
            >
              <FaThumbsUp /> Highlights
            </button>
            <button
              className={`px-6 py-3 font-medium flex items-center gap-2 ${activeTab === 'improvements' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400'}`}
              onClick={() => setActiveTab('improvements')}
            >
              <FaLightbulb /> Improvements
            </button>
            <button
              className={`px-6 py-3 font-medium flex items-center gap-2 ${activeTab === 'tips' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400'}`}
              onClick={() => setActiveTab('tips')}
            >
              <FaRegClock /> Tips
            </button>
          </div>

          <div className="tab-content p-6">
            {activeTab === 'analysis' && (
              <div className="space-y-8">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              
                  <div className="bg-gray-800/50 border border-gray-700 rounded-xl p-4">
                    <h3 className="text-lg font-semibold mb-4 text-center">Performance Breakdown</h3>
                    <div className="h-64">
                      <Bar
                        data={chartData}
                        options={{
                          responsive: true,
                          maintainAspectRatio: false,
                          scales: {
                            y: {
                              beginAtZero: true,
                              max: 5,
                              ticks: {
                                stepSize: 1
                              }
                            }
                          },
                          plugins: {
                            legend: {
                              display: false
                            }
                          }
                        }}
                      />
                    </div>
                  </div>

                  <div className="bg-gray-800/50 border border-gray-700 rounded-xl p-4">
                    <h3 className="text-lg font-semibold mb-4 text-center">Detailed Scores</h3>
                    <div className="space-y-4">
                      {Object.entries(parsedFeedback.stats).map(([key, value]) => (
                        <div key={key} className="space-y-2">
                          <div className="flex justify-between">
                            <span className="capitalize text-gray-300">
                              {key.replace('_', ' ')}
                            </span>
                            <span className="font-medium">
                              {value.score}/5
                            </span>
                          </div>
                          <div className="w-full bg-gray-700 rounded-full h-2.5">
                            <div
                              className="h-2.5 rounded-full bg-gradient-to-r from-blue-500 to-purple-500"
                              style={{ width: `${value.score * 20}%` }}
                            ></div>
                          </div>
                          <p className="text-sm text-gray-400">{value.comment}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'highlights' && (
              <div className="space-y-6">
                <h3 className="text-xl font-bold text-green-400 flex items-center gap-2">
                  <FaThumbsUp /> Your Strengths
                </h3>
                <ul className="space-y-4">
                  {parsedFeedback.highlights.map((highlight, index) => (
                    <li key={index} className="flex gap-3">
                      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-green-500/20 flex items-center justify-center text-green-400">
                        {index + 1}
                      </div>
                      <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4 flex-1">
                        <p className="text-gray-300">{highlight}</p>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {activeTab === 'improvements' && (
              <div className="space-y-6">
                <h3 className="text-xl font-bold text-yellow-400 flex items-center gap-2">
                  <FaLightbulb /> Areas for Improvement
                </h3>
                <ul className="space-y-4">
                  {parsedFeedback.improvements.map((improvement, index) => (
                    <li key={index} className="flex gap-3">
                      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-yellow-500/20 flex items-center justify-center text-yellow-400">
                        {index + 1}
                      </div>
                      <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4 flex-1">
                        <p className="text-gray-300">{improvement}</p>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {activeTab === 'tips' && (
              <div className="space-y-6">
                <h3 className="text-xl font-bold text-blue-400 flex items-center gap-2">
                  <FaRegClock /> Actionable Tips
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {parsedFeedback.tips.map((tip, index) => (
                    <div key={index} className="bg-gray-800/50 border border-gray-700 rounded-xl p-4">
                      <div className="text-blue-400 font-bold mb-2">TIP {index + 1}</div>
                      <p className="text-gray-300">{tip}</p>
                    </div>
                  ))}
                </div>

                <div className="mt-8 bg-gray-800/50 border border-gray-700 rounded-xl p-6">
                  <h3 className="text-lg font-semibold mb-3 text-purple-400">Recommended Next Steps</h3>
                  <ul className="space-y-3">
                    {parsedFeedback.next_steps.map((step, index) => (
                      <li key={index} className="flex gap-3">
                        <div className="flex-shrink-0 w-6 h-6 rounded-full bg-purple-500/20 flex items-center justify-center text-purple-400 mt-1">
                          {index + 1}
                        </div>
                        <p className="text-gray-300">{step}</p>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="bg-gray-800/50 border-t border-gray-700 p-4 text-center text-gray-500 text-sm">
          Generated on {new Date().toLocaleDateString()} • SKILLUP
        </div>
      </div>
    </div>
  );
};

export default FeedbackDisplay;